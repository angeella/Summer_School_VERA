which.max(C_net)[1]
str(which.max(C_net))
V(net)$name
V(net)$name[88]
max(C_net)
str(C_net)
hist(C_net)
hist(C_net,nclass = 100)
hist(C_net,nclass = 10)
hist(C_net,nclass = 50)
summary(C_net)
which.max(C_net)
C_net = igraph::closeness(graph = net, normalized = TRUE)
which.max(C_net)
hist(C_net)
hist(C_net, nclass = 30)
max(C_net)
which.min(C_net)
names(which.max(C_net))
subg = components(graph = net)
subg$csize
B_net = igraph::betweenness(graph = net,normalized = TRUE)
names(which.max(B_net))
names(which.max(B_net))
names(which.min(B_net))
names(which.max(B_net))
names(which.min(B_net))
subg = components(graph = net)
subg$csize
subg$membership
net = igraph::delete.vertices(net, which(subg$membership != 1))
C_net = igraph::closeness(graph = net,normalized = T)
B_net = igraph::betweenness(graph = net,normalized = T)
D_net = igraph::degree(net,normalized = T)
sort(C_net,decreasing = T)[1:5]
sort(D_net,decreasing = T)[1:5]
sort(B_net,decreasing = T)[1:5]
sort(C_net,decreasing = T)[1:5]
sort(D_net,decreasing = T)[1:5]
sort(B_net,decreasing = T)[1:5]
sort(B_net,decreasing = T)[1:5]
knitr::opts_chunk$set(echo = T, fig.align = "center", out.width = '80%', warning = F, message = F)
load("Datasets/russian_trolls.RData")
library(igraph)
net = graph_from_edgelist(Y,directed = F)
for(j in 1:ncol(X)){
net = net %>%
set_vertex_attr(name = colnames(X)[j],
value = X[,j])
}
V(net)$name = V(net)$vertex.names
summary(net)
E(net)
V(net)
list.vertex.attributes(net)
net = delete_vertices(net, which(igraph::degree(net) < 1))
D_net = igraph::degree(net)
sort(D_net,decreasing = T)[1:5]
par(mfrow=c(1,2))
hist(D_net,nclass = 100, main = "Degree distribution", xlab = "Degree")
hist(igraph::degree(net,normalized = T),nclass=100, main = "Degree distribution (normalized)", xlab = "Normalized degree")
edge_density(graph = net)
shortest_paths(graph = net,from = "aiden7757",to = "_nickluna_")$vpath
average.path.length(graph = net)
par(mfrow = c(1,1))
S = distances(graph = net)
image(S,col = gray.colors(n = diameter(net)))
#The diameter of a graph is the length of the longest geodesic.
C_net = igraph::closeness(graph = net, normalized = TRUE)
B_net = igraph::betweenness(graph = net,normalized = TRUE)
max(B_net)
names(which.max(B_net))
par(mfrow=c(1,2))
hist(C_net, breaks = 50)
hist(B_net, breaks = 50)
sum(B_net > .1)
cor(cbind(B_net,D_net,C_net))
library(GGally)
ggpairs((data.frame(B_net,D_net,C_net))) + theme_bw()
net = igraph::delete.vertices(net, which(subg$membership != 1))
C_net = igraph::closeness(graph = net,normalized = T)
B_net = igraph::betweenness(graph = net,normalized = T)
D_net = igraph::degree(net,normalized = T)
sort(C_net,decreasing = T)[1:5]
sort(D_net,decreasing = T)[1:5]
sort(B_net,decreasing = T)[1:5]
sum(B_net > .1)
cor(cbind(B_net,D_net,C_net))
library(GGally)
ggpairs((data.frame(B_net,D_net,C_net))) + theme_bw()
aType = vertex_attr(graph = net,name="accounttype")
aType
table(aType)
require(stringr)
aType = str_to_title(aType)
aType = str_replace(aType,"Ukranian","Russian")
aType = str_replace(aType,"Commercial|Local","News")
aType = str_replace(aType,"Koch","Fear")
aType = str_replace(aType,"^$|Arabic|\\?", "Other")
table(aType)
require(tidyverse)
df_pl = data.frame(den=D_net, clos = C_net, bet = B_net, x=aType)
#gather(df_pl,"den","clos","bet")
df_pl %>% dplyr::filter(x %in% c("Right","Left","Russian")) %>%
gather(.,"den","clos","bet",key="stat",value = "value") %>%
ggplot(aes(value,after_stat(density),color=x)) +
geom_freqpoly(lwd=1)+
facet_wrap(~stat,scales="free")+
theme_bw()
df_pl %>% dplyr::filter(x %in% c("Right","Left","Russian")) %>%
gather(.,"den","clos","bet",key="stat",value = "value") %>%
ggplot(aes(value,after_stat(density),color=x)) +
geom_freqpoly(lwd=1)+
facet_wrap(~stat,scales="free")+
theme_bw()
modularity(net,factor(aType))
assortativity(net,factor(aType))
assortativity_nominal(net,factor(aType))
assortativity_degree(net,factor(aType))
net
gr = cluster_louvain(graph = net)
#gr2 = cluster_fast_greedy(graph = net)
table(membership(gr))
modularity(gr)
table(membership(gr), aType)
knitr::opts_chunk$set(echo = T, fig.align = "center", out.width = '80%', warning = F, message = F)
rm(list = ls())
#load("Lab02/lab02.RData")
load("../Lab02/lab02.RData")
library(igraph)
library(ggraph)
par(mfrow = c(1,1))
plot(net)
V(net)$name[which(B_net < quantile(B_net, .99))] = NA
plot(net,
vertex.label=V(net)$name,
vertex.label.color = "black",
edge.color="grey",
vertex.color="orange",
vertex.frame.color="#ffffff",
main = "3 million Russian troll tweets")
set.seed(1234)
plot(net,
vertex.size = .5*log(igraph::betweenness(net)+1),
vertex.color = as.numeric(factor(aType)),
vertex.label=V(net)$name,
vertex.label.color = "black",
edge.color="grey",
vertex.color="orange",
vertex.frame.color="#ffffff",
main = "3 million Russian troll tweets")
set.seed(1234)
plot(net,
vertex.size = .2*log(igraph::betweenness(net)+1),
vertex.color = as.numeric(factor(aType)),
vertex.label=V(net)$name,
vertex.label.color = "black",
edge.color="grey",
vertex.color="orange",
vertex.frame.color="#ffffff",
main = "3 million Russian troll tweets")
set.seed(1234)
plot(net,
vertex.size = .8*log(igraph::betweenness(net)+1),
vertex.color = as.numeric(factor(aType)),
vertex.label=V(net)$name,
vertex.label.color = "black",
edge.color="grey",
vertex.color="orange",
vertex.frame.color="#ffffff",
main = "3 million Russian troll tweets")
set.seed(1234)
plot(net,
vertex.size = log(igraph::betweenness(net)+1),
vertex.color = as.numeric(factor(aType)),
vertex.label=V(net)$name,
vertex.label.color = "black",
edge.color="grey",
vertex.color="orange",
vertex.frame.color="#ffffff",
main = "3 million Russian troll tweets")
set.seed(1234)
plot(net,
vertex.size = igraph::betweenness(net),
vertex.color = as.numeric(factor(aType)),
vertex.label=V(net)$name,
vertex.label.color = "black",
edge.color="grey",
vertex.color="orange",
vertex.frame.color="#ffffff",
main = "3 million Russian troll tweets")
set.seed(1234)
plot(net,
vertex.size = log(igraph::betweenness(net)+1),
vertex.color = as.numeric(factor(aType)),
vertex.label=V(net)$name,
vertex.label.color = "black",
edge.color="grey",
vertex.color="orange",
vertex.frame.color="#ffffff",
main = "3 million Russian troll tweets")
llMDS = layout_with_mds(net)
plot(net,layout= llMDS)
knitr::opts_chunk$set(echo = T, fig.align = "center", out.width = '80%', warning = F, message = F)
rm(list = ls())
#load("Lab02/lab02.RData")
load("../Lab02/lab02.RData")
library(igraph)
library(ggraph)
par(mfrow = c(1,1))
plot(net)
V(net)$label = V(net)$name
V(net)$label[which(B_net < quantile(B_net, .99))] = NA
V(net)$label.color = "black"
V(net)$size = log(igraph::betweenness(net)+1)
V(net)$color = as.numeric(factor(aType))
E(net)$arrow.size<-.2
E(net)$edge.color<-"gray80"
set.seed(1234)
plot(net)
llMDS = layout_with_mds(net)
plot(net,layout= llMDS)
set.seed(1)
llFR = layout_with_fr(net,niter = 5000)
plot(net,layout= llFR)
l <- layout_with_fr(net, niter=5000)
par(mfrow=c(2,2), mar=c(0,0,0,0)) # plot four figures- 2 rows, 2 columns
plot(net, layout=layout_with_fr)
plot(net, layout=layout_with_fr)
plot(net, layout=l)
plot(net, layout=l)
par(mfrow=c(2,2), mar=c(0,0,0,0)) # plot four figures- 2 rows, 2 columns
plot(net, layout=layout_with_fr)
set.seed(1)
plot(net, layout=layout_with_fr)
plot(net, layout=l)
plot(net, layout=l)
par(mfrow=c(2,2), mar=c(0,0,0,0)) # plot four figures- 2 rows, 2 columns
plot(net, layout=layout_with_fr)
set.seed(1)
plot(net, layout=layout_with_fr)
plot(net, layout=l)
plot(net, layout=l)
par(mfrow=c(2,2), mar=c(0,0,0,0)) # plot four figures- 2 rows, 2 columns
plot(net, layout=layout_with_fr(maxiter = 200))
l <- layout_with_fr(net, niter=5000)
l1 <- layout_with_fr(net, niter=5000)
par(mfrow=c(2,2), mar=c(0,0,0,0)) # plot four figures- 2 rows, 2 columns
plot(net, layout=layout_with_fr)
plot(net, layout=l1)
plot(net, layout=l)
plot(net, layout=l)
l2 <-layout_with_fr(net, niter=5000)
par(mfrow=c(2,2), mar=c(0,0,0,0)) # plot four figures- 2 rows, 2 columns
plot(net, layout=layout_with_fr)
plot(net, layout=l1)
plot(net, layout=l2)
plot(net, layout=l)
par(mfrow=c(1,1), mar=c(0,0,0,0)) # plot four figures- 1 rows, 2 columns
plot(net, layout=layout_with_fr)
plot(net, layout=l1)
par(mfrow=c(1,1), mar=c(0,0)) # plot four figures- 1 rows, 2 columns
par(mfrow=c(1,2), mar=c(0,0,0,0)) # plot four figures- 1 rows, 2 columns
plot(net, layout=layout_with_fr)
plot(net, layout=l1)
par(mfrow=c(1,2), mar=c(0,0,0,0)) # plot four figures- 1 rows, 2 columns
plot(net, layout=l)
plot(net, layout=l1)
set.seed(1)
llFR = layout_with_fr(net,niter = 5000)
plot(net,layout= llFR)
l <- layout_with_fr(net, niter=5000)
set.seed(1)
llFR = layout_with_fr(net,niter = 5000)
plot(net,layout= llFR)
plot(net, layout=llFR)
par(mfrow=c(1,2), mar=c(0,0,0,0)) # plot four figures- 1 rows, 2 columns
plot(net, layout=layout_with_fr)
plot(net, layout=llFR)
par(mfrow=c(1,2)) # plot four figures- 1 rows, 2 columns
plot(net, layout=layout_with_fr)
plot(net, layout=llFR)
par(mfrow= c(1,1))
set.seed(1)
llKK = layout_with_kk(net,dim = 2,maxiter = 100*vcount(net))
plot(net,layout= llKK)
l1 <- layout_with_graphopt(net, charge=0.02)
l2 <- layout_with_graphopt(net, charge=0.00000001)
par(mfrow=c(1,2), mar=c(1,1,1,1))
plot(net, layout=l1)
plot(net, layout=l2)
l1 <- layout_with_graphopt(net, charge=0.02)
l2 <- layout_with_graphopt(net, charge=0.00000001)
par(mfrow=c(1,2), mar=c(1,1,1,1))
plot(net, layout=l1)
plot(net, layout=l2)
par(mfrow=c(1,1))
graph_attr(net,"layout")<-layout_with_lgl
plot(net)
layouts <- grep("layout_", ls("package:igraph"), value=TRUE)[-c(1:2)]
layouts <- layouts[grepl("attr|graphopt|with_kk|with_fr|with_mds", layouts)]
par(mfrow=c(2,2), mar=c(1,1,1,1))
for(layout in layouts){
print(layout)
l <- do.call(layout, list(net))
plot(net, edge.arrow.mode=0, layout=l, main=layout)
}
V(net)$community <- gr$membership
colrs <- adjustcolor(sample(colors(distinct = TRUE),11), alpha=.6)
plot(net,
vertex.color=colrs[V(net)$community],
vertex.label = NA)
dist.from.Left <- distances(net, v=V(net)[aType=="Left"], to=V(net), weights=NA)
oranges<-colorRampPalette(c("darkred","gold"))
col<-oranges(max(dist.from.Left)+1)
col<-col[dist.from.Left+1]
plot(net,
vertex.color=col,
vertex.label=dist.from.Left,
vertex.label.color = "white")
dist.from.Left
right.path<-shortest_paths(net,
from=V(net)[aType=="Left"],
to=V(net)[aType=="Right"],
output="both")
ecol<-rep("gray80",ecount(net))
ecol[unlist(right.path$epath)]<-"orange"
ew<-rep(2,ecount(net))
ew[unlist(right.path$epath)]<-4
vcol<-rep("gray40",vcount(net))
vcol[unlist(right.path$vpath)]<-"gold"
plot(net,
vertex.color=vcol,
edge.color=ecol,
edge.width=ew,edge.arrow.mode=0)
inc.edges <- incident(net, V(net)[aType=="Left"], mode="all")
ecol <- rep("gray80", ecount(net))
ecol[inc.edges] <- "orange"
vcol <- rep("grey40", vcount(net))
vcol[V(net)$aType=="News"] <- "gold"
plot(net,
vertex.color=vcol,
edge.color=ecol)
dist.from.Left <- distances(net, v=V(net)[aType=="Left"], to=V(net), weights=NA)
dim(dist.from.Left)
table(aType)
right.path<-shortest_paths(net,
from=V(net)[aType=="Left"],
to=V(net)[aType=="Right"],
output="both")
right.path
str(right.path)
ecount(net)
ecol
unlist(right.path$epath)
inc.edges <- incident(net, V(net)[aType=="Left"], mode="all")
ecol <- rep("gray80", ecount(net))
ecol[inc.edges] <- "orange"
vcol <- rep("grey40", vcount(net))
vcol[V(net)$aType=="News"] <- "gold"
plot(net,
vertex.color=vcol,
edge.color=ecol)
inc.edges
ecol <- rep("gray80", ecount(net))
ecol[inc.edges]
ecol[inc.edges] <- "orange"
vcol <- rep("grey40", vcount(net))
vcol[V(net)$aType=="News"]
vcol[V(net)$aType=="Right"]
V(net)$aType
V(net)[aType=="Right"]
V(net)[aType=="News"]
vcol[V(net)[aType=="News"]]
vcol[V(net)[aType=="News"]] <- "gold"
plot(net,
vertex.color=vcol,
edge.color=ecol)
neigh.nodes <- neighbors(net, V(net)[aType=="Left"], mode="out")
vcol[neigh.nodes] <- "#ff9d00"
plot(net, vertex.color=vcol)
par(mfrow=c(1,2))
plot(net, mark.groups=c(1,4,5,8), mark.col="#C5E5E7", mark.border=NA)
# Mark multiple groups:
plot(net, mark.groups=list(c(1,4,5,8), c(15:17)), mark.col=c("#C5E5E7","#ECD89A"), mark.border=NA)
#do not run!
tkid <- tkplot(net) #tkid is the id of the tkplot that will open
library(ggraph)
ggraph(net) +
geom_edge_link(color = "gray70") +
geom_node_point(color = V(net)$color) +
theme_minimal()
library(tidygraph)
df = as_tbl_graph(net)
df %>% mutate(btw= centrality_betweenness()) %>%
ggraph(layout="fr") +
geom_edge_link(show.legend = FALSE, color="gray70") +
geom_node_point(aes(colour = aType, size= btw), show.legend=T) +
geom_node_label(aes(label=label))+
scale_size(guide="none") +
theme_graph(base_family='sans') +
theme(legend.position = "bottom")
library(tidygraph)
df = as_tbl_graph(net)
df %>% mutate(btw= log(centrality_betweenness()+1)) %>%
ggraph(layout="fr") +
geom_edge_link(show.legend = FALSE, color="gray70") +
geom_node_point(aes(colour = aType, size= btw), show.legend=T) +
geom_node_label(aes(label=label))+
scale_size(guide="none") +
theme_graph(base_family='sans') +
theme(legend.position = "bottom")
library(tidygraph)
df = as_tbl_graph(net)
df %>% mutate(btw= .5*log(centrality_betweenness()+1)) %>%
ggraph(layout="fr") +
geom_edge_link(show.legend = FALSE, color="gray70") +
geom_node_point(aes(colour = aType, size= btw), show.legend=T) +
geom_node_label(aes(label=label))+
scale_size(guide="none") +
theme_graph(base_family='sans') +
theme(legend.position = "bottom")
library(tidygraph)
df = as_tbl_graph(net)
df %>% mutate(btw= .2*log(centrality_betweenness()+1)) %>%
ggraph(layout="fr") +
geom_edge_link(show.legend = FALSE, color="gray70") +
geom_node_point(aes(colour = aType, size= btw), show.legend=T) +
geom_node_label(aes(label=label))+
scale_size(guide="none") +
theme_graph(base_family='sans') +
theme(legend.position = "bottom")
library(tidygraph)
df = as_tbl_graph(net)
df %>% mutate(btw= .1*log(centrality_betweenness()+1)) %>%
ggraph(layout="fr") +
geom_edge_link(show.legend = FALSE, color="gray70") +
geom_node_point(aes(colour = aType, size= btw), show.legend=T) +
geom_node_label(aes(label=label))+
scale_size(guide="none") +
theme_graph(base_family='sans') +
theme(legend.position = "bottom")
library(tidygraph)
df = as_tbl_graph(net)
df %>% mutate(btw= .01*log(centrality_betweenness()+1)) %>%
ggraph(layout="fr") +
geom_edge_link(show.legend = FALSE, color="gray70") +
geom_node_point(aes(colour = aType, size= btw), show.legend=T) +
geom_node_label(aes(label=label))+
scale_size(guide="none") +
theme_graph(base_family='sans') +
theme(legend.position = "bottom")
library(tidygraph)
df = as_tbl_graph(net)
df %>% mutate(btw= .0001*log(centrality_betweenness()+1)) %>%
ggraph(layout="fr") +
geom_edge_link(show.legend = FALSE, color="gray70") +
geom_node_point(aes(colour = aType, size= btw), show.legend=T) +
geom_node_label(aes(label=label))+
scale_size(guide="none") +
theme_graph(base_family='sans') +
theme(legend.position = "bottom")
library(tidygraph)
df = as_tbl_graph(net)
df %>% mutate(btw= .5*log(centrality_betweenness()+1)) %>%
ggraph(layout="fr") +
geom_edge_link(show.legend = FALSE, color="gray70") +
geom_node_point(aes(colour = aType, size= btw), show.legend=T) +
geom_node_label(aes(label=label))+
scale_size(guide="none") +
theme_graph(base_family='sans') +
theme(legend.position = "bottom")
groupL = as.character(membership(gr))
table(groupL)
groupL[groupL %in% c(10,7,9, 11, 4)] = 4
groupL[groupL %in% c(8)] = 7
library(stringr)
table(groupL, aType)
groupL = str_replace(groupL, "1$", "Russian")
groupL = str_replace(groupL, "2", "Right")
groupL = str_replace(groupL, "3", "Russian2")
groupL = str_replace(groupL, "4", "Other")
groupL = str_replace(groupL, "5", "Left")
groupL = str_replace(groupL, "6", "Hashtager")
groupL = str_replace(groupL, "7", "German")
assortativity(net, as.factor(groupL))
df = as_tbl_graph(net)
df %>% mutate(btw= centrality_betweenness()) %>%
ggraph(layout="fr") +
geom_edge_link(show.legend = FALSE,color="gray") +
geom_node_point(aes(colour = groupL,size= btw),alpha =
1,show.legend=T) +
geom_node_label(aes(label=label))+
theme_graph(base_family='sans') +
scale_size(guide="none") +
theme(legend.position = "bottom")
V(net)$better_gr = groupL
df = as_tbl_graph(net)
df = df %>% activate(edges) %>%
mutate(e_col = ifelse(.N()$better_gr[to]
== .N()$better_gr[from], .N()$better_gr[from], NA))
df %>%
activate(nodes) %>%
mutate(btw= centrality_betweenness()) %>%
ggraph(layout="fr") +
geom_edge_link(aes(color=e_col),alpha=.7,show.legend = FALSE) +
geom_node_point(aes(colour = groupL,size= btw),show.legend=T) +
geom_node_label(aes(label=label))+
theme_graph(base_family='sans') +
theme(legend.position = "bottom") +
scale_size(guide="none") +
scale_edge_color_discrete(guide="none")
