net.sub
vertex.attributes(net)
str(vertex.attributesnet)
str(vertex.attributes(net)
)
table(vertex.attributes(net)$accountype)
table(vertex.attributes(net)$accounttype)
net.sub <- delete_vertices(net, vertex.attributes(net)$accounttype != "local")
net.sub
net.sub <- delete_vertices(net, vertex.attributes(net)$accounttype != "Koch")
net.sub
net.sub <- delete_vertices(net, vertex.attributes(net)$accounttype != "left")
net.sub
A <- as_adjacency_matrix(net.sub, sparse=FALSE)
g<- network::as.network.matrix(A)
sna::gplot.target(g, sna::degree(g))
sna::degree(g)
g
g$mel
g<- network::as.network.matrix(A, directed = FALSE)
g
sna::gplot.target(g, sna::degree(g))
library(sna)
g<-rgraph(15)
gplot.target(g,betweenness(g))
g
sna::gplot.target(A, sna::degree(A))
aidsblog
library(VBLPCM)
install.packages("VBLPCM")
library(VBLPCM)
aidsblog
data(aidsblog)
aids.net
data(aids.net)
library(VBLPCM)
data(aids)
aids.net
subg = components(graph = net)
subg = igraph::components(graph = net)
subg$csize
eb <- edge.betweenness(net)
e
eb
E(net)[order(eb, decreasing=T)[1:3]]
table(sapply(cliques(net), length))
table(sapply(cliques(net), length))
cliques(net)
cliques(net)[sapply(cliques(net), length) == 6]
cliques(net)[sapply(cliques(net), length) == 6][[1:4]]
cliques(net)[sapply(cliques(net), length) == 6][[1]]
cliques(net)[sapply(cliques(net), length) == 6][[2]]
cliques(net)[sapply(cliques(net), length) == 6][[1]]
cliques(net)[sapply(cliques(net), length) == 6][[2]]
cliques(net)[sapply(cliques(net), length) == 6][[3]]
table(sapply(maximal.cliques(net), length))
clique.number(net)
clique.number(karate)
data(karate)
cores <- graph.coreness(net)
cores
knitr::opts_chunk$set(echo = T, fig.align = "center", out.width = '80%', warning = F, message = F)
library(ergm)
data(lazega)
data(lazega)
library(sand) #to load the dats
library(sand) #to load the dats
install.packages("sand")
library(sand)
data(lazega)
lazega
library(ergm)
library(sand) #to load the data
data(lazega)
A <- get.adjacency(lazega)
A <- get.adjacency(lazega)
plot(lazega)
plot(lazega.s)
lazega.s <- network::as.network(as.matrix(A), directed = FALSE)
plot(lazega.s)
plot(lazega.s)
plot(lazega.s)
library(statnet)
install.packages("statnet")
library(statnet)
library(intergraph)
install.packages("intergraph")
library(intergraph)
lazega.ergm <- asNetwork(lazega)
lazega.ergm <- asNetwork(lazega)
lazega.ergm
random_graph <- ergm(lazega.ergm ~ edges, control = control.ergm(seed = 1234))
inv.logit <- function(logit){
odds <- exp(logit)
prob <- odds / (1 + odds)
return(prob)
}
theta <- coef(random_graph)
inv.logit(theta)
network.density(lazega.ergm)
summary(random_graph)
set.seed(1234)
hundred_simulations <- simulate(random_graph,
coef = theta,
nsim = 100,
control = control.simulate.ergm(MCMC.burnin = 1000,
MCMC.interval = 1000))
par(mfrow = c(3, 3))
sapply(hundred_simulations[1:9], plot, vertex.cex = 1, vertex.col = "tomato")
net_densities <- unlist(lapply(hundred_simulations, network.density))
hist(net_densities, xlab = "Density", main = "", col = "lightgray")
abline(v = network.density(statnet59), col = "red", lwd = 3, lty = 2)
net_densities <- unlist(lapply(hundred_simulations, network.density))
hist(net_densities, xlab = "Density", main = "", col = "lightgray")
abline(v = network.density(lazega.ergm), col = "red", lwd = 3, lty = 2)
abline(v = mean(net_densities), col = "blue", lwd = 3, lty = 1)
gof_stats <- gof(random_graph)
par(mfrow = c(2, 3))
plot(gof_stats, main = '')
lazega.ergm
model1 <- ergm(lazega.ergm ~ edges +
nodematch("Age") +
nodematch("Gender") +
nodematch("Seniority"))
summary(model1)
vertex.attributes(lazega)
model1 <- ergm(lazega.ergm ~ edges +
nodematch("Age") +
nodematch("Office") +
nodematch("Years"))
summary(model1)
?ergm.terms
summaey.statistics(random_graph)
library(ergm)
summaey.statistics(random_graph)
summary.statistics(random_graph)
rm(list = ls())
library(statnet)
library(sand) #to load the data
data(lazega)
library(intergraph)
lazega.ergm <- asNetwork(lazega)
lazega.ergm
plot(lazega.ergm,
vertex.col = "tomato",
vertex.cex = 1)
random_graph <- ergm(lazega.ergm ~ edges, control = control.ergm(seed = 1234))
inv.logit <- function(logit){
odds <- exp(logit)
prob <- odds / (1 + odds)
return(prob)
}
theta <- coef(random_graph)
inv.logit(theta)
network.density(lazega.ergm)
summary(random_graph)
set.seed(1234)
hundred_simulations <- simulate(random_graph,
coef = theta,
nsim = 100,
control = control.simulate.ergm(MCMC.burnin = 1000,
MCMC.interval = 1000))
net_densities <- unlist(lapply(hundred_simulations, network.density))
hist(net_densities, xlab = "Density", main = "", col = "lightgray")
abline(v = network.density(lazega.ergm), col = "red", lwd = 3, lty = 2)
abline(v = mean(net_densities), col = "blue", lwd = 3, lty = 1)
gof_stats <- gof(random_graph)
par(mfrow = c(2, 3))
plot(gof_stats, main = '')
lazega.ergm <- formula(lazega.ergm ~ edges
+ gwesp(log(3), fixed=TRUE)
+ nodemain("Seniority")
+ nodemain("Practice")
+ match("Practice")
+ match("Gender")
+ match("Office"))
lazega.ergm.fit <- ergm(lazega.ergm)
random_graph
lazega.ergm <- formula(lazega.ergm ~ edges + gwesp(log(3), fixed=TRUE)
+ nodemain("Seniority")
+ nodemain("Practice")
+ match("Practice")
+ match("Gender")
+ match("Office"))
lazega.ergm
lazega.ergm.formula <- formula(lazega.ergm ~ edges + gwesp(log(3), fixed=TRUE)
+ nodemain("Seniority")
+ nodemain("Practice")
+ match("Practice")
+ match("Gender")
+ match("Office"))
lazega.ergm.fit <- ergm(lazega.ergm)
knitr::opts_chunk$set(echo = T, fig.align = "center", out.width = '80%', warning = F, message = F)
rm(list = ls())
library(statnet)
library(sand) #to load the data
data(lazega)
library(intergraph)
lazega.ergm <- asNetwork(lazega)
lazega.ergm
plot(lazega.ergm,
vertex.col = "tomato",
vertex.cex = 1)
random_graph <- ergm(lazega.ergm ~ edges, control = control.ergm(seed = 1234))
inv.logit <- function(logit){
odds <- exp(logit)
prob <- odds / (1 + odds)
return(prob)
}
theta <- coef(random_graph)
inv.logit(theta)
network.density(lazega.ergm)
summary(random_graph)
set.seed(1234)
hundred_simulations <- simulate(random_graph,
coef = theta,
nsim = 100,
control = control.simulate.ergm(MCMC.burnin = 1000,
MCMC.interval = 1000))
par(mfrow = c(3, 3))
sapply(hundred_simulations[1:9], plot, vertex.cex = 1, vertex.col = "tomato")
lazega.ergm.formula <- formula(lazega.ergm ~ edges + gwesp(log(3), fixed=TRUE)
+ nodemain("Seniority")
+ nodemain("Practice")
+ match("Practice")
+ match("Gender")
+ match("Office"))
lazega.ergm.fit <- ergm(lazega.ergm.formula)
summary(lazega.ergm.fit)
anova.ergm(lazega.ergm.fit)
summary.ergm(lazega.ergm.fit)
library(ergm)
summary.ergm(lazega.ergm.fit)
gof.lazega.ergm <- gof(lazega.ergm.fit)
par(mfrow=c(1, 3))
plot(gof.lazega.ergm)
anova(lazega.ergm.fit)
rm(list = ls())
library(statnet)
library(sand) #to load the data
library(ergm)
data(lazega)
library(intergraph)
lazega.ergm <- asNetwork(lazega)
lazega.ergm
plot(lazega.ergm,
vertex.col = "tomato",
label = network.vertex.names(lazega.ergm),
vertex.cex = 1)
vertex.attributes(lazega)
lazega.ergm$mel
lazega.ergm$gal
lazega.ergm$val
get.vertex.attribute(lazega.ergm)
years <- lazega.ergm %v% 'Years' # %v% references vertex attributes, equivalent to get.vertex.attribute(lazega.ergm, "Years")
plot(lazega.ergm,
vertex.col = "tomato",
vertex.cex = years)
plot(lazega.ergm,
vertex.col = "tomato",
vertex.cex = log(years))
plot(lazega.ergm,
vertex.col = "tomato",
vertex.cex = years/25)
plot(lazega.ergm,
vertex.col = "tomato",
vertex.cex = years/5)
plot(lazega.ergm,
vertex.col = "tomato",
vertex.cex = years/10)
summary(lazega.ergm ~ edges) # Calculate the edges statistic for this network
lazega.ergm
random_graph <- ergm(lazega.ergm ~ edges, control = control.ergm(seed = 1234))
summary(random_graph)
inv.logit <- function(logit){
odds <- exp(logit)
prob <- odds / (1 + odds)
return(prob)
}
theta <- coef(random_graph)
inv.logit(theta)
set.seed(1234)
hundred_simulations <- simulate(random_graph,
coef = theta,
nsim = 100,
control = control.simulate.ergm(MCMC.burnin = 1000,
MCMC.interval = 1000))
par(mfrow = c(3, 3))
sapply(hundred_simulations[1:9], plot, vertex.cex = 1, vertex.col = "tomato")
sapply(hundred_simulations[1:9], plot, vertex.cex = 1, vertex.col = "tomato")
net_densities <- unlist(lapply(hundred_simulations, network.density))
hist(net_densities, xlab = "Density", main = "", col = "lightgray")
abline(v = network.density(lazega.ergm), col = "red", lwd = 3, lty = 2)
abline(v = mean(net_densities), col = "blue", lwd = 3, lty = 1)
hist(net_densities, xlab = "Density", main = "", col = "lightgray")
abline(v = network.density(lazega.ergm), col = "red", lwd = 3, lty = 2)
abline(v = mean(net_densities), col = "blue", lwd = 3, lty = 1)
plot(gof_stats)
gof_stats <- gof(random_graph)
gof_stats <- gof(random_graph)
plot(gof_stats, main = '')
plot(gof_stats, main = '')
gof_stats
summary(random_graph)
gof_stats
plot(gof_stats)
network.density(lazega.ergm)
summary(lazega.ergm~edges+triangle) # Look at the g(y) stats for this model
ergm.terms?
=
?ergm.terms
tr_graph <- ergm(lazega.ergm ~ edges + triangles)
summary(lazega.ergm ~ edges + gwesp(log(3), fixed=TRUE)
+ nodemain("Seniority")
+ nodemain("Practice")
+ match("Practice")
+ match("Gender")
+ match("Office"))
summary(lazega.ergm ~ edges + gwesp(log(3), fixed=TRUE)
+ nodecov("Seniority")
+ nodecov("Practice")
+ nodematch("Practice")
+ nodematch("Gender")
+ nodematch("Office"))
anova(lazega.ergm.fit)
knitr::opts_chunk$set(echo = T, fig.align = "center", out.width = '80%', warning = F, message = F)
rm(list = ls())
library(statnet)
library(sand) #to load the data
library(ergm)
data(lazega)
library(intergraph)
lazega.ergm <- asNetwork(lazega)
lazega.ergm
years <- lazega.ergm %v% 'Years' # %v% references vertex attributes, equivalent to get.vertex.attribute(lazega.ergm, "Years")
plot(lazega.ergm,
vertex.col = "tomato",
vertex.cex = years/10)
summary(lazega.ergm ~ edges) # Calculate the edges statistic for this network
random_graph <- ergm(lazega.ergm ~ edges, control = control.ergm(seed = 1234))
inv.logit <- function(logit){
odds <- exp(logit)
prob <- odds / (1 + odds)
return(prob)
}
theta <- coef(random_graph)
inv.logit(theta)
network.density(lazega.ergm)
summary(random_graph)
set.seed(1234)
hundred_simulations <- simulate(random_graph,
coef = theta,
nsim = 100,
control = control.simulate.ergm(MCMC.burnin = 1000,
MCMC.interval = 1000))
par(mfrow = c(3, 3))
sapply(hundred_simulations[1:9], plot, vertex.cex = 1, vertex.col = "tomato")
anova(lazega.ergm.fit)
anova(lazega.ergm)
lazega.ergm.fit <- ergm(lazega.ergm ~ edges + gwesp(log(3), fixed=TRUE)
+ nodecov("Seniority")
+ nodecov("Practice")
+ nodematch("Practice")
+ nodematch("Gender")
+ nodematch("Office"))
summary(lazega.ergm.fit)
anova(lazega.ergm.fit)
summary(lazega.ergm.fit)
table(V(lazega)$Practice)
exp(0.3926)
exp(0.7197)
graph.density(net)
knitr::opts_chunk$set(echo = T, fig.align = "center", out.width = '80%', warning = F, message = F)
library(igraph)
load("Datasets/russian_trolls.RData")
```
load("Datasets/russian_trolls.RData")
load("C:/Users/Andreella/Documents/Didattica/Summer_School_VERA/Lab02/Datasets/russian_trolls.RData")
net
net = graph_from_edgelist(Y, directed = F)
for(j in 1:ncol(X)){
net = net %>%
set_vertex_attr(name = colnames(X)[j],
value = X[,j])
}
V(net)$name = V(net)$vertex.names
sub.net <- induced.subgraph(net, neighborhood(net, 1, 1)[[1]])
sub.net <- induced.subgraph(net, igraph::neighborhood(net, 1, 1)[[1]])
graph.density(net)
igraph::neighborhood(net, 1, 1)
igraph::neighborhood(net, 1, 2)
igraph::neighborhood(net, 1, 3)
table(V(net)$accountype)
table(V(net)$accounttype)
V(net)$accounttype == "left"
which(V(net)$accounttype == "left")
sub.net <- induced.subgraph(net, igraph::neighborhood(net, 1, 1209)[[1]])
graph.density(net)
sub.net <- induced.subgraph(net, igraph::neighborhood(net, 1, which(V(net)$accounttype == "left"))[[1]])
graph.density(net)
sub.net <- induced.subgraph(net, igraph::neighborhood(net, 1, which(V(net)$accounttype == "right"))[[1]])
graph.density(net)
sub.net <- induced.subgraph(net, igraph::neighborhood(net, 1, which(V(net)$accounttype == "right")))
sub.net <- induced.subgraph(net, igraph::neighborhood(net, 1, 100)[[1]])
graph.density(net)
sub.net <- induced.subgraph(net, igraph::neighborhood(net, 1, 1000)[[1]])
graph.density(net)
sub.net <- induced.subgraph(net, igraph::neighborhood(net, 1, 1)[[1]])
graph.density(net)
sub.net <- induced.subgraph(net, igraph::neighborhood(net, 1, 2)[[1]])
graph.density(net)
sub.net <- induced.subgraph(net, igraph::neighborhood(net, 1, which(V(net)$accounttype == "right"))[[3]])
sub.net <- induced.subgraph(net, igraph::neighborhood(net, 1, which(V(net)$accounttype == "right"))[[2]])
igraph::neighborhood(net, 1, which(V(net)$accounttype == "right"))
igraph::neighborhood(net, 1, which(V(net)$accounttype == "left"))
sub.net <- induced.subgraph(net, igraph::neighborhood(net, 1, which(V(net)$accounttype == "left"))[[132]])
graph.density(net)
sub.net <- induced.subgraph(net, igraph::neighborhood(net, 1, which(V(net)$accounttype == "left"))[[132]])
graph.density(sub.net)
sub.net <- induced.subgraph(net, igraph::neighborhood(net, 1, which(V(net)$accounttype == "right"))[[1]])
graph.density(sub.net)
sub.net <- induced.subgraph(net, igraph::neighborhood(net, 1, which(V(net)$accounttype == "left"))[[1]])
graph.density(sub.net)
sub.net <- induced.subgraph(net, igraph::neighborhood(net, 1, which(V(net)$accounttype == "right"))[[1]])
graph.density(sub.net)
sub.net <- induced.subgraph(net, igraph::neighborhood(net, 1, which(V(net)$accounttype == "left"))[[2]])
graph.density(sub.net)
sub.net <- induced.subgraph(net, igraph::neighborhood(net, 1, which(V(net)$accounttype == "right"))[[1]])
graph.density(sub.net)
transitivity(net)
transitivity(net, "local", vids = 1)
transitivity(net, "local", vids = 2)
transitivity(net, "local", vids = which(V(net)$accounttype == "left")[1])
transitivity(net, "local", vids = which(V(net)$accounttype == "left")[2])
gr = cluster_louvain(graph = net)
#gr2 = cluster_fast_greedy(graph = net) #agglomerative hierarchical clustering algorithm
plot(gr)
plot(gr, net)
V(net)
V(net)$attributes
get.edge.attribute(net)
net
vertex.names(net)
vertex_attr_names(net)
vertex_attr(net)$vertex.names
net1 <- net
vertex_attr(net1)$vertex.names  <- NULL
plot(gr, net1)
vertex_attr(net1)$vertex.names
vertex_attr(net1)$names
vertex_attr(net1)
vertex_attr(net1)$name  <- NULL
plot(gr, net1)
V(net)
V(net)$name
net1 <- net
vertex_attr(net1)$name  <- NULL
gr1 = cluster_louvain(graph = net1)
plot(gr1, net1)
V(net1)
plot(gr1, net1, name = NULL)
plot(gr1, net1, vertex.name = NULL)
V(net1)
V(net)
V(net)$name
V(net1)$name
V(net1)$name <- rep("", length(V(net1)$name))
V(net1)$name <- rep("", vcount(net1))
plot(gr)
plot(gr,net1)
gr1 = cluster_louvain(graph = net1)
plot(gr,net1)
plot(gr1,net1)
V(net1)
net1 <- net
vertex_attr(net1)$name  <- NULL
gr1 = cluster_louvain(graph = net1)
plot(gr1, net1, vertex.name = NULL)
plot(gr1, net1, vertex.name = NULL)
plot(gr1, net1,col = NULL)
plot(gr1, net1,col = NULL)
table(membership(gr1))
table(membership(gr))
gr2 = cluster_fast_greedy(graph = net)
table(membership(gr2))
aType = vertex_attr(graph = net,name="accounttype")
table(aType)
require(stringr)
aType = str_to_title(aType)
aType = str_replace(aType,"Ukranian","Russian")
aType = str_replace(aType,"Commercial|Local","News")
aType = str_replace(aType,"Koch","Fear")
aType = str_replace(aType,"^$|Arabic|\\?", "Other")
table(aType)
gr = cluster_louvain(graph = net)
#gr2 = cluster_fast_greedy(graph = net) #agglomerative hierarchical clustering algorithm
class(gr)
table(membership(gr))
assortativity(net,membership(gr))
table(membership(gr))
net1 <- net
vertex_attr(net1)$name  <- NULL
gr1 = cluster_louvain(graph = net1)
plot(gr1, net1,col = NULL)
knitr::opts_chunk$set(echo = T, fig.align = "center", out.width = '80%', warning = F, message = F)
library(igraph)
load("Datasets/russian_trolls.RData")
```
library(mizer)
library(mixer)
install.packages("mixer")
install.packages("sbm")
